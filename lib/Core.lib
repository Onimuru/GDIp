;============ Auto-Execute ====================================================;
;======================================================  Include  ==============;

#Include %A_LineFile%\..\ObjectOriented\Array.lib
#Include %A_LineFile%\..\ObjectOriented\Object.lib
#Include %A_LineFile%\..\String\String.lib

#Include %A_LineFile%\..\Structure\Structure.lib

;#Include %A_LineFile%\..\Math\Math.lib

#Include %A_LineFile%\..\Core\User32.lib
#Include %A_LineFile%\..\Core\GDI.lib
#Include %A_LineFile%\..\Core\GDIp.lib

;============== Function ======================================================;
;======================================================  Library  ==============;

FreeLibrary(libraryName) {
	static loaded := {ComCtl32: {Ptr: DllCall("Kernel32\GetModuleHandle", "Str", "ComCtl32", "Ptr")}, Gdi32: {Ptr: DllCall("Kernel32\GetModuleHandle", "Str", "Gdi32", "Ptr")}, Kernel32: {Ptr: DllCall("Kernel32\GetModuleHandle", "Str", "Kernel32", "Ptr")}, User32: {Ptr: DllCall("Kernel32\GetModuleHandle", "Str", "User32", "Ptr")}}  ;* "User32", "Kernel32", "ComCtl32" and "Gdi32" are already loaded.

	if (libraryName == "__SuperSecretString") {
		return (loaded)
	}
	else if (Type(libraryName) == "Object") {
		if (--loaded.%libraryName := libraryName.Name%.Count) {
			return (False)
		}
	}

	if (!(libraryName ~= "i)ComCtl32|Gdi32|Kernel32|User32")) {
		if (loaded.HasProp(libraryName)) {
			loaded.DeleteProp(libraryName)
		}

		if (handle := DllCall("Kernel32\GetModuleHandle", "Str", libraryName, "Ptr")) {  ;* If the library module is already in the address space of the script's process.
			if (!DllCall("Kernel32\FreeLibrary", "Ptr", handle, "UInt")) {
				throw (ErrorFromMessage(DllCall("Kernel32\GetLastError")))
			}

			return (True)
		}
	}

	return (False)
}

LoadLibrary(libraryName) {
	static loaded := FreeLibrary("__SuperSecretString")

	if (!(loaded.HasProp(libraryName))) {
		if (!(ptr := DllCall("Kernel32\LoadLibrary", "Str", libraryName, "Ptr"))) {
			throw (ErrorFromMessage(DllCall("Kernel32\GetLastError")))
		}

		loaded.%libraryName% := {Count: 0
			, Ptr: ptr}
	}

	loaded.%libraryName%.Count++

	return (loaded.%libraryName%.Ptr)
}

GetProcAddress(libraryName, functionName) {
	ptr := LoadLibrary(libraryName)

	if (functionName == "*") {
		static library := {Call: (*) => ({__Delete: FreeLibrary})}

		(o := library.Call()).Name := libraryName
			, p := ptr + NumGet(ptr + 0x3C, "Int") + 24

		if (NumGet(p + ((A_PtrSize == 4) ? (92) : (108)), "UInt") < 1 || (ts := NumGet(p + ((A_PtrSize == 4) ? (96) : (112)), "UInt") + ptr) == ptr || (te := NumGet(p + ((A_PtrSize == 4) ? (100) : (116)), "UInt") + ts) == ts) {
			return (o)
		}

		loop ((n := ptr + NumGet(ts + 32, "UInt")), NumGet(ts + 24, "UInt")) {
			if (p := NumGet(n + (A_Index - 1)*4, "UInt")) {
				o.%f := StrGet(ptr + p, "CP0")% := DllCall("Kernel32\GetProcAddress", "Ptr", ptr, "AStr", f, "Ptr")

				if (SubStr(f, -1) == "W") {
					o.%SubStr(f, 1, -1)% := o.%f%
				}
			}
		}

		return (o)
	}

	return (DllCall("Kernel32\GetProcAddress", "Ptr", DllCall("Kernel32\GetModuleHandle", "Str", libraryName, "Ptr"), "AStr", functionName, "Ptr"))
}

;=================================================== Error Handling ===========;

;* ErrorFromMessage(messageID)
ErrorFromMessage(messageID) {
	if (!(length := DllCall("Kernel32\FormatMessage", "UInt", 0x1100  ;? 0x1100 = FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_ALLOCATE_BUFFER
		, "Ptr", 0, "UInt", messageID, "UInt", 0, "Ptr*", &(buffer := 0), "UInt", 0, "Ptr", 0, "Int"))) {  ;: https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-formatmessage
		return (ErrorFromMessage(DllCall("Kernel32\GetLastError")))
	}

	message := StrGet(buffer, length - 2)  ;* Account for the newline and carriage return characters.
	DllCall("Kernel32\LocalFree", "Ptr", buffer, "Ptr")

	return (Error(Format("0x{:X}", messageID), -1, message))
}

;* ErrorFromStatus(status)
ErrorFromStatus(status) {
	static statusLookup := Map(1, "GenericError", 2, "InvalidParameter", 3, "OutOfMemory", 4, "ObjectBusy", 5, "InsufficientBuffer", 6, "NotImplemented", 7, "Win32Error", 8, "WrongState", 9, "Aborted", 10, "FileNotFound", 11, "ValueOverflow", 12, "AccessDenied", 13, "UnknownImageFormat", 14, "FontFamilyNotFound", 15, "FontStyleNotFound", 16, "NotTrueTypeFont", 17, "UnsupportedGdiplusVersion", 18, "GdiplusNotInitialized", 19, "PropertyNotFound", 20, "PropertyNotSupported", 21, "ProfileNotFound")  ;: https://docs.microsoft.com/en-us/windows/win32/api/gdiplustypes/ne-gdiplustypes-status

	return (Error(status, -2, statusLookup[status]))
}